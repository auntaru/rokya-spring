
2015-05.13 JAX-RS-JSON | maven dependency : javax.servlet 

Error : 
<< The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path >> 
http://howtodoinjava.com/2015/02/04/solved-the-superclass-javax-servlet-http-httpservlet-was-not-found-on-the-java-build-path-in-eclipse/

Solution : 
Add maven dependency
Another option is include the servlet dependency through maven itself. This will also fix the error.
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>servlet-api</artifactId>
    <version>2.5</version>
</dependency>


      JAX-RS-JSON_thirdCommit - Deploy Server + Client Requests 

Right click on the project and select Run As-> Run on Server
Once Tomcat is up and running successfully one should see the index.jsp page of the project running at location 
                                                        http://localhost:8080/JAX-RS-JSON/index.jsp.
                                                        
Once the Jersey server is up and running we can fire the requests from our Jersey Client.
Just go to the RestClient.java class, Right Click -> Run As -> Java Application

                                                        

      JAX-RS-JSON_secondCommit - new.pom.xml + new.web.xml 

   We'll create a Jersey server that will present a POJO class Student.java as a 
JSON object when a ‘get’ request is made to it and also allow a JSON object to be posted to it. 
We will deploy the server on a Tomcat instance from Eclipse. 
And then we will create a Jersey Client from which we will trigger the ‘get’ and ‘post’ requests to the server.

1. Add dependencies ; Set-up pom.xml file
We will use the latest version 1.19 of Jersey and add the following three Maven dependencies to our project.
Jersey-Servlet to set-up the server
Jersey-Client to cook-up a client instance
Jersey-JSON to allow the handling of JSON objects
So our pom file would be as shown below.

   Set-up web.xml file
Now, we want our Rest Server to be deployable. 
And we want it to be able to process JSON-POJO mapping. 
Hence, the web.xml file needs to be configured as shown below.
Notice how the location of the Server has been configured in the init-param tags
The POJO mapping feature of Jersey has been enabled by including com.sun.jersey.api.json.POJOMappingFeature in the second init-param tags
Also, it is worth observing that in the servlet-mapping tags we mentioned the URL pattern as rest/*. 
This implies all URLs on our server would be appended with rest/. 
So the URLs for get and post would be host:port(of the server)/JAXRS-JSON(name of the project)/rest/student/data/get or post; 
that is, http://localhost:8080/JAXRS-JSON/rest/student/data/get and 
http://localhost:8080/JAXRS-JSON/rest/student/data/post respectively.



_firstCommit - pom.xml.ini + web.xml.ini   
     in primul commit pom.xml este cel creeat de Wizard-ul "New MAVEN Project" , "maven-archetype-webapp" !    

   ~ a Maven project created via Eclipse : 
         File-> New -> Project -> Maven Project ; 
         Choose archetype : maven-archetype-webapp ! 


   http://examples.javacodegeeks.com/core-java/json-jax-rs-example/

JAX-RS is a Java API designed to be used as a standard to simplify the development of RESTful Web Services and their clients.
Jersey RESTful Web Services framework is an open-source Reference Implementation of this API that is JSR-311 compliant. 
We are going to use Jersey. JSON should be a heard of term. 
It is an acronym that stands for JavaScript Object Notation and is based on a subset of the JavaScript Programming Language. 
It is a lightweight data-interchange format that is widely used since it is easy and simple to be understood and 
parsed for both humans and machines. 
Think of it as a simple set of key:value pairs represented as myJson = {“name”:”Lily”, “age”:9}.
Jackson is the tool to convert objects to/from JSON.
   